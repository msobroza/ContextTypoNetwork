package tools.interface_cuda;

/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-04-04")
public class CUDAContextInterface {

  public interface Iface {

    public int createContextNetwork(int idNetwork, String fileName) throws org.apache.thrift.TException;

    public int destroyContextNetwork(int idNetwork) throws org.apache.thrift.TException;

    public int learnCompleteSequences(List<ContextNetwork> listActivatedNetworks, List<String> wordsSequence) throws org.apache.thrift.TException;

    public List<String> getActivatedWordsNetwork(List<DecodingInputWordNetwork> inputWordsSequence, int idMainWordNetwork) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void createContextNetwork(int idNetwork, String fileName, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void destroyContextNetwork(int idNetwork, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void learnCompleteSequences(List<ContextNetwork> listActivatedNetworks, List<String> wordsSequence, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getActivatedWordsNetwork(List<DecodingInputWordNetwork> inputWordsSequence, int idMainWordNetwork, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public int createContextNetwork(int idNetwork, String fileName) throws org.apache.thrift.TException
    {
      send_createContextNetwork(idNetwork, fileName);
      return recv_createContextNetwork();
    }

    public void send_createContextNetwork(int idNetwork, String fileName) throws org.apache.thrift.TException
    {
      createContextNetwork_args args = new createContextNetwork_args();
      args.setIdNetwork(idNetwork);
      args.setFileName(fileName);
      sendBase("createContextNetwork", args);
    }

    public int recv_createContextNetwork() throws org.apache.thrift.TException
    {
      createContextNetwork_result result = new createContextNetwork_result();
      receiveBase(result, "createContextNetwork");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "createContextNetwork failed: unknown result");
    }

    public int destroyContextNetwork(int idNetwork) throws org.apache.thrift.TException
    {
      send_destroyContextNetwork(idNetwork);
      return recv_destroyContextNetwork();
    }

    public void send_destroyContextNetwork(int idNetwork) throws org.apache.thrift.TException
    {
      destroyContextNetwork_args args = new destroyContextNetwork_args();
      args.setIdNetwork(idNetwork);
      sendBase("destroyContextNetwork", args);
    }

    public int recv_destroyContextNetwork() throws org.apache.thrift.TException
    {
      destroyContextNetwork_result result = new destroyContextNetwork_result();
      receiveBase(result, "destroyContextNetwork");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "destroyContextNetwork failed: unknown result");
    }

    public int learnCompleteSequences(List<ContextNetwork> listActivatedNetworks, List<String> wordsSequence) throws org.apache.thrift.TException
    {
      send_learnCompleteSequences(listActivatedNetworks, wordsSequence);
      return recv_learnCompleteSequences();
    }

    public void send_learnCompleteSequences(List<ContextNetwork> listActivatedNetworks, List<String> wordsSequence) throws org.apache.thrift.TException
    {
      learnCompleteSequences_args args = new learnCompleteSequences_args();
      args.setListActivatedNetworks(listActivatedNetworks);
      args.setWordsSequence(wordsSequence);
      sendBase("learnCompleteSequences", args);
    }

    public int recv_learnCompleteSequences() throws org.apache.thrift.TException
    {
      learnCompleteSequences_result result = new learnCompleteSequences_result();
      receiveBase(result, "learnCompleteSequences");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "learnCompleteSequences failed: unknown result");
    }

    public List<String> getActivatedWordsNetwork(List<DecodingInputWordNetwork> inputWordsSequence, int idMainWordNetwork) throws org.apache.thrift.TException
    {
      send_getActivatedWordsNetwork(inputWordsSequence, idMainWordNetwork);
      return recv_getActivatedWordsNetwork();
    }

    public void send_getActivatedWordsNetwork(List<DecodingInputWordNetwork> inputWordsSequence, int idMainWordNetwork) throws org.apache.thrift.TException
    {
      getActivatedWordsNetwork_args args = new getActivatedWordsNetwork_args();
      args.setInputWordsSequence(inputWordsSequence);
      args.setIdMainWordNetwork(idMainWordNetwork);
      sendBase("getActivatedWordsNetwork", args);
    }

    public List<String> recv_getActivatedWordsNetwork() throws org.apache.thrift.TException
    {
      getActivatedWordsNetwork_result result = new getActivatedWordsNetwork_result();
      receiveBase(result, "getActivatedWordsNetwork");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getActivatedWordsNetwork failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void createContextNetwork(int idNetwork, String fileName, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createContextNetwork_call method_call = new createContextNetwork_call(idNetwork, fileName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createContextNetwork_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int idNetwork;
      private String fileName;
      public createContextNetwork_call(int idNetwork, String fileName, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.idNetwork = idNetwork;
        this.fileName = fileName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createContextNetwork", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createContextNetwork_args args = new createContextNetwork_args();
        args.setIdNetwork(idNetwork);
        args.setFileName(fileName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_createContextNetwork();
      }
    }

    public void destroyContextNetwork(int idNetwork, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      destroyContextNetwork_call method_call = new destroyContextNetwork_call(idNetwork, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class destroyContextNetwork_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int idNetwork;
      public destroyContextNetwork_call(int idNetwork, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.idNetwork = idNetwork;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("destroyContextNetwork", org.apache.thrift.protocol.TMessageType.CALL, 0));
        destroyContextNetwork_args args = new destroyContextNetwork_args();
        args.setIdNetwork(idNetwork);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_destroyContextNetwork();
      }
    }

    public void learnCompleteSequences(List<ContextNetwork> listActivatedNetworks, List<String> wordsSequence, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      learnCompleteSequences_call method_call = new learnCompleteSequences_call(listActivatedNetworks, wordsSequence, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class learnCompleteSequences_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<ContextNetwork> listActivatedNetworks;
      private List<String> wordsSequence;
      public learnCompleteSequences_call(List<ContextNetwork> listActivatedNetworks, List<String> wordsSequence, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.listActivatedNetworks = listActivatedNetworks;
        this.wordsSequence = wordsSequence;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("learnCompleteSequences", org.apache.thrift.protocol.TMessageType.CALL, 0));
        learnCompleteSequences_args args = new learnCompleteSequences_args();
        args.setListActivatedNetworks(listActivatedNetworks);
        args.setWordsSequence(wordsSequence);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_learnCompleteSequences();
      }
    }

    public void getActivatedWordsNetwork(List<DecodingInputWordNetwork> inputWordsSequence, int idMainWordNetwork, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getActivatedWordsNetwork_call method_call = new getActivatedWordsNetwork_call(inputWordsSequence, idMainWordNetwork, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getActivatedWordsNetwork_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<DecodingInputWordNetwork> inputWordsSequence;
      private int idMainWordNetwork;
      public getActivatedWordsNetwork_call(List<DecodingInputWordNetwork> inputWordsSequence, int idMainWordNetwork, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.inputWordsSequence = inputWordsSequence;
        this.idMainWordNetwork = idMainWordNetwork;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getActivatedWordsNetwork", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getActivatedWordsNetwork_args args = new getActivatedWordsNetwork_args();
        args.setInputWordsSequence(inputWordsSequence);
        args.setIdMainWordNetwork(idMainWordNetwork);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<String> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getActivatedWordsNetwork();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("createContextNetwork", new createContextNetwork());
      processMap.put("destroyContextNetwork", new destroyContextNetwork());
      processMap.put("learnCompleteSequences", new learnCompleteSequences());
      processMap.put("getActivatedWordsNetwork", new getActivatedWordsNetwork());
      return processMap;
    }

    public static class createContextNetwork<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createContextNetwork_args> {
      public createContextNetwork() {
        super("createContextNetwork");
      }

      public createContextNetwork_args getEmptyArgsInstance() {
        return new createContextNetwork_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public createContextNetwork_result getResult(I iface, createContextNetwork_args args) throws org.apache.thrift.TException {
        createContextNetwork_result result = new createContextNetwork_result();
        result.success = iface.createContextNetwork(args.idNetwork, args.fileName);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class destroyContextNetwork<I extends Iface> extends org.apache.thrift.ProcessFunction<I, destroyContextNetwork_args> {
      public destroyContextNetwork() {
        super("destroyContextNetwork");
      }

      public destroyContextNetwork_args getEmptyArgsInstance() {
        return new destroyContextNetwork_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public destroyContextNetwork_result getResult(I iface, destroyContextNetwork_args args) throws org.apache.thrift.TException {
        destroyContextNetwork_result result = new destroyContextNetwork_result();
        result.success = iface.destroyContextNetwork(args.idNetwork);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class learnCompleteSequences<I extends Iface> extends org.apache.thrift.ProcessFunction<I, learnCompleteSequences_args> {
      public learnCompleteSequences() {
        super("learnCompleteSequences");
      }

      public learnCompleteSequences_args getEmptyArgsInstance() {
        return new learnCompleteSequences_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public learnCompleteSequences_result getResult(I iface, learnCompleteSequences_args args) throws org.apache.thrift.TException {
        learnCompleteSequences_result result = new learnCompleteSequences_result();
        result.success = iface.learnCompleteSequences(args.listActivatedNetworks, args.wordsSequence);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getActivatedWordsNetwork<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getActivatedWordsNetwork_args> {
      public getActivatedWordsNetwork() {
        super("getActivatedWordsNetwork");
      }

      public getActivatedWordsNetwork_args getEmptyArgsInstance() {
        return new getActivatedWordsNetwork_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getActivatedWordsNetwork_result getResult(I iface, getActivatedWordsNetwork_args args) throws org.apache.thrift.TException {
        getActivatedWordsNetwork_result result = new getActivatedWordsNetwork_result();
        result.success = iface.getActivatedWordsNetwork(args.inputWordsSequence, args.idMainWordNetwork);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("createContextNetwork", new createContextNetwork());
      processMap.put("destroyContextNetwork", new destroyContextNetwork());
      processMap.put("learnCompleteSequences", new learnCompleteSequences());
      processMap.put("getActivatedWordsNetwork", new getActivatedWordsNetwork());
      return processMap;
    }

    public static class createContextNetwork<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, createContextNetwork_args, Integer> {
      public createContextNetwork() {
        super("createContextNetwork");
      }

      public createContextNetwork_args getEmptyArgsInstance() {
        return new createContextNetwork_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            createContextNetwork_result result = new createContextNetwork_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            createContextNetwork_result result = new createContextNetwork_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, createContextNetwork_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.createContextNetwork(args.idNetwork, args.fileName,resultHandler);
      }
    }

    public static class destroyContextNetwork<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, destroyContextNetwork_args, Integer> {
      public destroyContextNetwork() {
        super("destroyContextNetwork");
      }

      public destroyContextNetwork_args getEmptyArgsInstance() {
        return new destroyContextNetwork_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            destroyContextNetwork_result result = new destroyContextNetwork_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            destroyContextNetwork_result result = new destroyContextNetwork_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, destroyContextNetwork_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.destroyContextNetwork(args.idNetwork,resultHandler);
      }
    }

    public static class learnCompleteSequences<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, learnCompleteSequences_args, Integer> {
      public learnCompleteSequences() {
        super("learnCompleteSequences");
      }

      public learnCompleteSequences_args getEmptyArgsInstance() {
        return new learnCompleteSequences_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            learnCompleteSequences_result result = new learnCompleteSequences_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            learnCompleteSequences_result result = new learnCompleteSequences_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, learnCompleteSequences_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.learnCompleteSequences(args.listActivatedNetworks, args.wordsSequence,resultHandler);
      }
    }

    public static class getActivatedWordsNetwork<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getActivatedWordsNetwork_args, List<String>> {
      public getActivatedWordsNetwork() {
        super("getActivatedWordsNetwork");
      }

      public getActivatedWordsNetwork_args getEmptyArgsInstance() {
        return new getActivatedWordsNetwork_args();
      }

      public AsyncMethodCallback<List<String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<String>>() { 
          public void onComplete(List<String> o) {
            getActivatedWordsNetwork_result result = new getActivatedWordsNetwork_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getActivatedWordsNetwork_result result = new getActivatedWordsNetwork_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getActivatedWordsNetwork_args args, org.apache.thrift.async.AsyncMethodCallback<List<String>> resultHandler) throws TException {
        iface.getActivatedWordsNetwork(args.inputWordsSequence, args.idMainWordNetwork,resultHandler);
      }
    }

  }

  public static class createContextNetwork_args implements org.apache.thrift.TBase<createContextNetwork_args, createContextNetwork_args._Fields>, java.io.Serializable, Cloneable, Comparable<createContextNetwork_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createContextNetwork_args");

    private static final org.apache.thrift.protocol.TField ID_NETWORK_FIELD_DESC = new org.apache.thrift.protocol.TField("idNetwork", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField FILE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("fileName", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createContextNetwork_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createContextNetwork_argsTupleSchemeFactory());
    }

    public int idNetwork; // required
    public String fileName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID_NETWORK((short)1, "idNetwork"),
      FILE_NAME((short)2, "fileName");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID_NETWORK
            return ID_NETWORK;
          case 2: // FILE_NAME
            return FILE_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __IDNETWORK_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID_NETWORK, new org.apache.thrift.meta_data.FieldMetaData("idNetwork", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.FILE_NAME, new org.apache.thrift.meta_data.FieldMetaData("fileName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createContextNetwork_args.class, metaDataMap);
    }

    public createContextNetwork_args() {
    }

    public createContextNetwork_args(
      int idNetwork,
      String fileName)
    {
      this();
      this.idNetwork = idNetwork;
      setIdNetworkIsSet(true);
      this.fileName = fileName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createContextNetwork_args(createContextNetwork_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.idNetwork = other.idNetwork;
      if (other.isSetFileName()) {
        this.fileName = other.fileName;
      }
    }

    public createContextNetwork_args deepCopy() {
      return new createContextNetwork_args(this);
    }

    @Override
    public void clear() {
      setIdNetworkIsSet(false);
      this.idNetwork = 0;
      this.fileName = null;
    }

    public int getIdNetwork() {
      return this.idNetwork;
    }

    public createContextNetwork_args setIdNetwork(int idNetwork) {
      this.idNetwork = idNetwork;
      setIdNetworkIsSet(true);
      return this;
    }

    public void unsetIdNetwork() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IDNETWORK_ISSET_ID);
    }

    /** Returns true if field idNetwork is set (has been assigned a value) and false otherwise */
    public boolean isSetIdNetwork() {
      return EncodingUtils.testBit(__isset_bitfield, __IDNETWORK_ISSET_ID);
    }

    public void setIdNetworkIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IDNETWORK_ISSET_ID, value);
    }

    public String getFileName() {
      return this.fileName;
    }

    public createContextNetwork_args setFileName(String fileName) {
      this.fileName = fileName;
      return this;
    }

    public void unsetFileName() {
      this.fileName = null;
    }

    /** Returns true if field fileName is set (has been assigned a value) and false otherwise */
    public boolean isSetFileName() {
      return this.fileName != null;
    }

    public void setFileNameIsSet(boolean value) {
      if (!value) {
        this.fileName = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID_NETWORK:
        if (value == null) {
          unsetIdNetwork();
        } else {
          setIdNetwork((Integer)value);
        }
        break;

      case FILE_NAME:
        if (value == null) {
          unsetFileName();
        } else {
          setFileName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID_NETWORK:
        return getIdNetwork();

      case FILE_NAME:
        return getFileName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID_NETWORK:
        return isSetIdNetwork();
      case FILE_NAME:
        return isSetFileName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createContextNetwork_args)
        return this.equals((createContextNetwork_args)that);
      return false;
    }

    public boolean equals(createContextNetwork_args that) {
      if (that == null)
        return false;

      boolean this_present_idNetwork = true;
      boolean that_present_idNetwork = true;
      if (this_present_idNetwork || that_present_idNetwork) {
        if (!(this_present_idNetwork && that_present_idNetwork))
          return false;
        if (this.idNetwork != that.idNetwork)
          return false;
      }

      boolean this_present_fileName = true && this.isSetFileName();
      boolean that_present_fileName = true && that.isSetFileName();
      if (this_present_fileName || that_present_fileName) {
        if (!(this_present_fileName && that_present_fileName))
          return false;
        if (!this.fileName.equals(that.fileName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_idNetwork = true;
      list.add(present_idNetwork);
      if (present_idNetwork)
        list.add(idNetwork);

      boolean present_fileName = true && (isSetFileName());
      list.add(present_fileName);
      if (present_fileName)
        list.add(fileName);

      return list.hashCode();
    }

    @Override
    public int compareTo(createContextNetwork_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetIdNetwork()).compareTo(other.isSetIdNetwork());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIdNetwork()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.idNetwork, other.idNetwork);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFileName()).compareTo(other.isSetFileName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFileName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileName, other.fileName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createContextNetwork_args(");
      boolean first = true;

      sb.append("idNetwork:");
      sb.append(this.idNetwork);
      first = false;
      if (!first) sb.append(", ");
      sb.append("fileName:");
      if (this.fileName == null) {
        sb.append("null");
      } else {
        sb.append(this.fileName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createContextNetwork_argsStandardSchemeFactory implements SchemeFactory {
      public createContextNetwork_argsStandardScheme getScheme() {
        return new createContextNetwork_argsStandardScheme();
      }
    }

    private static class createContextNetwork_argsStandardScheme extends StandardScheme<createContextNetwork_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createContextNetwork_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID_NETWORK
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.idNetwork = iprot.readI32();
                struct.setIdNetworkIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FILE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.fileName = iprot.readString();
                struct.setFileNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createContextNetwork_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ID_NETWORK_FIELD_DESC);
        oprot.writeI32(struct.idNetwork);
        oprot.writeFieldEnd();
        if (struct.fileName != null) {
          oprot.writeFieldBegin(FILE_NAME_FIELD_DESC);
          oprot.writeString(struct.fileName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createContextNetwork_argsTupleSchemeFactory implements SchemeFactory {
      public createContextNetwork_argsTupleScheme getScheme() {
        return new createContextNetwork_argsTupleScheme();
      }
    }

    private static class createContextNetwork_argsTupleScheme extends TupleScheme<createContextNetwork_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createContextNetwork_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetIdNetwork()) {
          optionals.set(0);
        }
        if (struct.isSetFileName()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetIdNetwork()) {
          oprot.writeI32(struct.idNetwork);
        }
        if (struct.isSetFileName()) {
          oprot.writeString(struct.fileName);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createContextNetwork_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.idNetwork = iprot.readI32();
          struct.setIdNetworkIsSet(true);
        }
        if (incoming.get(1)) {
          struct.fileName = iprot.readString();
          struct.setFileNameIsSet(true);
        }
      }
    }

  }

  public static class createContextNetwork_result implements org.apache.thrift.TBase<createContextNetwork_result, createContextNetwork_result._Fields>, java.io.Serializable, Cloneable, Comparable<createContextNetwork_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createContextNetwork_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createContextNetwork_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createContextNetwork_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createContextNetwork_result.class, metaDataMap);
    }

    public createContextNetwork_result() {
    }

    public createContextNetwork_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createContextNetwork_result(createContextNetwork_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public createContextNetwork_result deepCopy() {
      return new createContextNetwork_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public createContextNetwork_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createContextNetwork_result)
        return this.equals((createContextNetwork_result)that);
      return false;
    }

    public boolean equals(createContextNetwork_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(createContextNetwork_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createContextNetwork_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createContextNetwork_resultStandardSchemeFactory implements SchemeFactory {
      public createContextNetwork_resultStandardScheme getScheme() {
        return new createContextNetwork_resultStandardScheme();
      }
    }

    private static class createContextNetwork_resultStandardScheme extends StandardScheme<createContextNetwork_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createContextNetwork_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createContextNetwork_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createContextNetwork_resultTupleSchemeFactory implements SchemeFactory {
      public createContextNetwork_resultTupleScheme getScheme() {
        return new createContextNetwork_resultTupleScheme();
      }
    }

    private static class createContextNetwork_resultTupleScheme extends TupleScheme<createContextNetwork_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createContextNetwork_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createContextNetwork_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class destroyContextNetwork_args implements org.apache.thrift.TBase<destroyContextNetwork_args, destroyContextNetwork_args._Fields>, java.io.Serializable, Cloneable, Comparable<destroyContextNetwork_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("destroyContextNetwork_args");

    private static final org.apache.thrift.protocol.TField ID_NETWORK_FIELD_DESC = new org.apache.thrift.protocol.TField("idNetwork", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new destroyContextNetwork_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new destroyContextNetwork_argsTupleSchemeFactory());
    }

    public int idNetwork; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID_NETWORK((short)1, "idNetwork");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID_NETWORK
            return ID_NETWORK;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __IDNETWORK_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID_NETWORK, new org.apache.thrift.meta_data.FieldMetaData("idNetwork", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(destroyContextNetwork_args.class, metaDataMap);
    }

    public destroyContextNetwork_args() {
    }

    public destroyContextNetwork_args(
      int idNetwork)
    {
      this();
      this.idNetwork = idNetwork;
      setIdNetworkIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public destroyContextNetwork_args(destroyContextNetwork_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.idNetwork = other.idNetwork;
    }

    public destroyContextNetwork_args deepCopy() {
      return new destroyContextNetwork_args(this);
    }

    @Override
    public void clear() {
      setIdNetworkIsSet(false);
      this.idNetwork = 0;
    }

    public int getIdNetwork() {
      return this.idNetwork;
    }

    public destroyContextNetwork_args setIdNetwork(int idNetwork) {
      this.idNetwork = idNetwork;
      setIdNetworkIsSet(true);
      return this;
    }

    public void unsetIdNetwork() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IDNETWORK_ISSET_ID);
    }

    /** Returns true if field idNetwork is set (has been assigned a value) and false otherwise */
    public boolean isSetIdNetwork() {
      return EncodingUtils.testBit(__isset_bitfield, __IDNETWORK_ISSET_ID);
    }

    public void setIdNetworkIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IDNETWORK_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID_NETWORK:
        if (value == null) {
          unsetIdNetwork();
        } else {
          setIdNetwork((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID_NETWORK:
        return getIdNetwork();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID_NETWORK:
        return isSetIdNetwork();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof destroyContextNetwork_args)
        return this.equals((destroyContextNetwork_args)that);
      return false;
    }

    public boolean equals(destroyContextNetwork_args that) {
      if (that == null)
        return false;

      boolean this_present_idNetwork = true;
      boolean that_present_idNetwork = true;
      if (this_present_idNetwork || that_present_idNetwork) {
        if (!(this_present_idNetwork && that_present_idNetwork))
          return false;
        if (this.idNetwork != that.idNetwork)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_idNetwork = true;
      list.add(present_idNetwork);
      if (present_idNetwork)
        list.add(idNetwork);

      return list.hashCode();
    }

    @Override
    public int compareTo(destroyContextNetwork_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetIdNetwork()).compareTo(other.isSetIdNetwork());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIdNetwork()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.idNetwork, other.idNetwork);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("destroyContextNetwork_args(");
      boolean first = true;

      sb.append("idNetwork:");
      sb.append(this.idNetwork);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class destroyContextNetwork_argsStandardSchemeFactory implements SchemeFactory {
      public destroyContextNetwork_argsStandardScheme getScheme() {
        return new destroyContextNetwork_argsStandardScheme();
      }
    }

    private static class destroyContextNetwork_argsStandardScheme extends StandardScheme<destroyContextNetwork_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, destroyContextNetwork_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID_NETWORK
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.idNetwork = iprot.readI32();
                struct.setIdNetworkIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, destroyContextNetwork_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ID_NETWORK_FIELD_DESC);
        oprot.writeI32(struct.idNetwork);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class destroyContextNetwork_argsTupleSchemeFactory implements SchemeFactory {
      public destroyContextNetwork_argsTupleScheme getScheme() {
        return new destroyContextNetwork_argsTupleScheme();
      }
    }

    private static class destroyContextNetwork_argsTupleScheme extends TupleScheme<destroyContextNetwork_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, destroyContextNetwork_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetIdNetwork()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetIdNetwork()) {
          oprot.writeI32(struct.idNetwork);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, destroyContextNetwork_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.idNetwork = iprot.readI32();
          struct.setIdNetworkIsSet(true);
        }
      }
    }

  }

  public static class destroyContextNetwork_result implements org.apache.thrift.TBase<destroyContextNetwork_result, destroyContextNetwork_result._Fields>, java.io.Serializable, Cloneable, Comparable<destroyContextNetwork_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("destroyContextNetwork_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new destroyContextNetwork_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new destroyContextNetwork_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(destroyContextNetwork_result.class, metaDataMap);
    }

    public destroyContextNetwork_result() {
    }

    public destroyContextNetwork_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public destroyContextNetwork_result(destroyContextNetwork_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public destroyContextNetwork_result deepCopy() {
      return new destroyContextNetwork_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public destroyContextNetwork_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof destroyContextNetwork_result)
        return this.equals((destroyContextNetwork_result)that);
      return false;
    }

    public boolean equals(destroyContextNetwork_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(destroyContextNetwork_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("destroyContextNetwork_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class destroyContextNetwork_resultStandardSchemeFactory implements SchemeFactory {
      public destroyContextNetwork_resultStandardScheme getScheme() {
        return new destroyContextNetwork_resultStandardScheme();
      }
    }

    private static class destroyContextNetwork_resultStandardScheme extends StandardScheme<destroyContextNetwork_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, destroyContextNetwork_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, destroyContextNetwork_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class destroyContextNetwork_resultTupleSchemeFactory implements SchemeFactory {
      public destroyContextNetwork_resultTupleScheme getScheme() {
        return new destroyContextNetwork_resultTupleScheme();
      }
    }

    private static class destroyContextNetwork_resultTupleScheme extends TupleScheme<destroyContextNetwork_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, destroyContextNetwork_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, destroyContextNetwork_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class learnCompleteSequences_args implements org.apache.thrift.TBase<learnCompleteSequences_args, learnCompleteSequences_args._Fields>, java.io.Serializable, Cloneable, Comparable<learnCompleteSequences_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("learnCompleteSequences_args");

    private static final org.apache.thrift.protocol.TField LIST_ACTIVATED_NETWORKS_FIELD_DESC = new org.apache.thrift.protocol.TField("listActivatedNetworks", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField WORDS_SEQUENCE_FIELD_DESC = new org.apache.thrift.protocol.TField("wordsSequence", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new learnCompleteSequences_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new learnCompleteSequences_argsTupleSchemeFactory());
    }

    public List<ContextNetwork> listActivatedNetworks; // required
    public List<String> wordsSequence; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LIST_ACTIVATED_NETWORKS((short)1, "listActivatedNetworks"),
      WORDS_SEQUENCE((short)2, "wordsSequence");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LIST_ACTIVATED_NETWORKS
            return LIST_ACTIVATED_NETWORKS;
          case 2: // WORDS_SEQUENCE
            return WORDS_SEQUENCE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LIST_ACTIVATED_NETWORKS, new org.apache.thrift.meta_data.FieldMetaData("listActivatedNetworks", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ContextNetwork.class))));
      tmpMap.put(_Fields.WORDS_SEQUENCE, new org.apache.thrift.meta_data.FieldMetaData("wordsSequence", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(learnCompleteSequences_args.class, metaDataMap);
    }

    public learnCompleteSequences_args() {
    }

    public learnCompleteSequences_args(
      List<ContextNetwork> listActivatedNetworks,
      List<String> wordsSequence)
    {
      this();
      this.listActivatedNetworks = listActivatedNetworks;
      this.wordsSequence = wordsSequence;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public learnCompleteSequences_args(learnCompleteSequences_args other) {
      if (other.isSetListActivatedNetworks()) {
        List<ContextNetwork> __this__listActivatedNetworks = new ArrayList<ContextNetwork>(other.listActivatedNetworks.size());
        for (ContextNetwork other_element : other.listActivatedNetworks) {
          __this__listActivatedNetworks.add(new ContextNetwork(other_element));
        }
        this.listActivatedNetworks = __this__listActivatedNetworks;
      }
      if (other.isSetWordsSequence()) {
        List<String> __this__wordsSequence = new ArrayList<String>(other.wordsSequence);
        this.wordsSequence = __this__wordsSequence;
      }
    }

    public learnCompleteSequences_args deepCopy() {
      return new learnCompleteSequences_args(this);
    }

    @Override
    public void clear() {
      this.listActivatedNetworks = null;
      this.wordsSequence = null;
    }

    public int getListActivatedNetworksSize() {
      return (this.listActivatedNetworks == null) ? 0 : this.listActivatedNetworks.size();
    }

    public java.util.Iterator<ContextNetwork> getListActivatedNetworksIterator() {
      return (this.listActivatedNetworks == null) ? null : this.listActivatedNetworks.iterator();
    }

    public void addToListActivatedNetworks(ContextNetwork elem) {
      if (this.listActivatedNetworks == null) {
        this.listActivatedNetworks = new ArrayList<ContextNetwork>();
      }
      this.listActivatedNetworks.add(elem);
    }

    public List<ContextNetwork> getListActivatedNetworks() {
      return this.listActivatedNetworks;
    }

    public learnCompleteSequences_args setListActivatedNetworks(List<ContextNetwork> listActivatedNetworks) {
      this.listActivatedNetworks = listActivatedNetworks;
      return this;
    }

    public void unsetListActivatedNetworks() {
      this.listActivatedNetworks = null;
    }

    /** Returns true if field listActivatedNetworks is set (has been assigned a value) and false otherwise */
    public boolean isSetListActivatedNetworks() {
      return this.listActivatedNetworks != null;
    }

    public void setListActivatedNetworksIsSet(boolean value) {
      if (!value) {
        this.listActivatedNetworks = null;
      }
    }

    public int getWordsSequenceSize() {
      return (this.wordsSequence == null) ? 0 : this.wordsSequence.size();
    }

    public java.util.Iterator<String> getWordsSequenceIterator() {
      return (this.wordsSequence == null) ? null : this.wordsSequence.iterator();
    }

    public void addToWordsSequence(String elem) {
      if (this.wordsSequence == null) {
        this.wordsSequence = new ArrayList<String>();
      }
      this.wordsSequence.add(elem);
    }

    public List<String> getWordsSequence() {
      return this.wordsSequence;
    }

    public learnCompleteSequences_args setWordsSequence(List<String> wordsSequence) {
      this.wordsSequence = wordsSequence;
      return this;
    }

    public void unsetWordsSequence() {
      this.wordsSequence = null;
    }

    /** Returns true if field wordsSequence is set (has been assigned a value) and false otherwise */
    public boolean isSetWordsSequence() {
      return this.wordsSequence != null;
    }

    public void setWordsSequenceIsSet(boolean value) {
      if (!value) {
        this.wordsSequence = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LIST_ACTIVATED_NETWORKS:
        if (value == null) {
          unsetListActivatedNetworks();
        } else {
          setListActivatedNetworks((List<ContextNetwork>)value);
        }
        break;

      case WORDS_SEQUENCE:
        if (value == null) {
          unsetWordsSequence();
        } else {
          setWordsSequence((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LIST_ACTIVATED_NETWORKS:
        return getListActivatedNetworks();

      case WORDS_SEQUENCE:
        return getWordsSequence();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LIST_ACTIVATED_NETWORKS:
        return isSetListActivatedNetworks();
      case WORDS_SEQUENCE:
        return isSetWordsSequence();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof learnCompleteSequences_args)
        return this.equals((learnCompleteSequences_args)that);
      return false;
    }

    public boolean equals(learnCompleteSequences_args that) {
      if (that == null)
        return false;

      boolean this_present_listActivatedNetworks = true && this.isSetListActivatedNetworks();
      boolean that_present_listActivatedNetworks = true && that.isSetListActivatedNetworks();
      if (this_present_listActivatedNetworks || that_present_listActivatedNetworks) {
        if (!(this_present_listActivatedNetworks && that_present_listActivatedNetworks))
          return false;
        if (!this.listActivatedNetworks.equals(that.listActivatedNetworks))
          return false;
      }

      boolean this_present_wordsSequence = true && this.isSetWordsSequence();
      boolean that_present_wordsSequence = true && that.isSetWordsSequence();
      if (this_present_wordsSequence || that_present_wordsSequence) {
        if (!(this_present_wordsSequence && that_present_wordsSequence))
          return false;
        if (!this.wordsSequence.equals(that.wordsSequence))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_listActivatedNetworks = true && (isSetListActivatedNetworks());
      list.add(present_listActivatedNetworks);
      if (present_listActivatedNetworks)
        list.add(listActivatedNetworks);

      boolean present_wordsSequence = true && (isSetWordsSequence());
      list.add(present_wordsSequence);
      if (present_wordsSequence)
        list.add(wordsSequence);

      return list.hashCode();
    }

    @Override
    public int compareTo(learnCompleteSequences_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetListActivatedNetworks()).compareTo(other.isSetListActivatedNetworks());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetListActivatedNetworks()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.listActivatedNetworks, other.listActivatedNetworks);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetWordsSequence()).compareTo(other.isSetWordsSequence());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWordsSequence()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.wordsSequence, other.wordsSequence);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("learnCompleteSequences_args(");
      boolean first = true;

      sb.append("listActivatedNetworks:");
      if (this.listActivatedNetworks == null) {
        sb.append("null");
      } else {
        sb.append(this.listActivatedNetworks);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("wordsSequence:");
      if (this.wordsSequence == null) {
        sb.append("null");
      } else {
        sb.append(this.wordsSequence);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class learnCompleteSequences_argsStandardSchemeFactory implements SchemeFactory {
      public learnCompleteSequences_argsStandardScheme getScheme() {
        return new learnCompleteSequences_argsStandardScheme();
      }
    }

    private static class learnCompleteSequences_argsStandardScheme extends StandardScheme<learnCompleteSequences_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, learnCompleteSequences_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LIST_ACTIVATED_NETWORKS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.listActivatedNetworks = new ArrayList<ContextNetwork>(_list0.size);
                  ContextNetwork _elem1;
                  for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                  {
                    _elem1 = new ContextNetwork();
                    _elem1.read(iprot);
                    struct.listActivatedNetworks.add(_elem1);
                  }
                  iprot.readListEnd();
                }
                struct.setListActivatedNetworksIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // WORDS_SEQUENCE
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                  struct.wordsSequence = new ArrayList<String>(_list3.size);
                  String _elem4;
                  for (int _i5 = 0; _i5 < _list3.size; ++_i5)
                  {
                    _elem4 = iprot.readString();
                    struct.wordsSequence.add(_elem4);
                  }
                  iprot.readListEnd();
                }
                struct.setWordsSequenceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, learnCompleteSequences_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.listActivatedNetworks != null) {
          oprot.writeFieldBegin(LIST_ACTIVATED_NETWORKS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.listActivatedNetworks.size()));
            for (ContextNetwork _iter6 : struct.listActivatedNetworks)
            {
              _iter6.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.wordsSequence != null) {
          oprot.writeFieldBegin(WORDS_SEQUENCE_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.wordsSequence.size()));
            for (String _iter7 : struct.wordsSequence)
            {
              oprot.writeString(_iter7);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class learnCompleteSequences_argsTupleSchemeFactory implements SchemeFactory {
      public learnCompleteSequences_argsTupleScheme getScheme() {
        return new learnCompleteSequences_argsTupleScheme();
      }
    }

    private static class learnCompleteSequences_argsTupleScheme extends TupleScheme<learnCompleteSequences_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, learnCompleteSequences_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetListActivatedNetworks()) {
          optionals.set(0);
        }
        if (struct.isSetWordsSequence()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetListActivatedNetworks()) {
          {
            oprot.writeI32(struct.listActivatedNetworks.size());
            for (ContextNetwork _iter8 : struct.listActivatedNetworks)
            {
              _iter8.write(oprot);
            }
          }
        }
        if (struct.isSetWordsSequence()) {
          {
            oprot.writeI32(struct.wordsSequence.size());
            for (String _iter9 : struct.wordsSequence)
            {
              oprot.writeString(_iter9);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, learnCompleteSequences_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list10 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.listActivatedNetworks = new ArrayList<ContextNetwork>(_list10.size);
            ContextNetwork _elem11;
            for (int _i12 = 0; _i12 < _list10.size; ++_i12)
            {
              _elem11 = new ContextNetwork();
              _elem11.read(iprot);
              struct.listActivatedNetworks.add(_elem11);
            }
          }
          struct.setListActivatedNetworksIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.wordsSequence = new ArrayList<String>(_list13.size);
            String _elem14;
            for (int _i15 = 0; _i15 < _list13.size; ++_i15)
            {
              _elem14 = iprot.readString();
              struct.wordsSequence.add(_elem14);
            }
          }
          struct.setWordsSequenceIsSet(true);
        }
      }
    }

  }

  public static class learnCompleteSequences_result implements org.apache.thrift.TBase<learnCompleteSequences_result, learnCompleteSequences_result._Fields>, java.io.Serializable, Cloneable, Comparable<learnCompleteSequences_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("learnCompleteSequences_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new learnCompleteSequences_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new learnCompleteSequences_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(learnCompleteSequences_result.class, metaDataMap);
    }

    public learnCompleteSequences_result() {
    }

    public learnCompleteSequences_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public learnCompleteSequences_result(learnCompleteSequences_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public learnCompleteSequences_result deepCopy() {
      return new learnCompleteSequences_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public learnCompleteSequences_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof learnCompleteSequences_result)
        return this.equals((learnCompleteSequences_result)that);
      return false;
    }

    public boolean equals(learnCompleteSequences_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(learnCompleteSequences_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("learnCompleteSequences_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class learnCompleteSequences_resultStandardSchemeFactory implements SchemeFactory {
      public learnCompleteSequences_resultStandardScheme getScheme() {
        return new learnCompleteSequences_resultStandardScheme();
      }
    }

    private static class learnCompleteSequences_resultStandardScheme extends StandardScheme<learnCompleteSequences_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, learnCompleteSequences_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, learnCompleteSequences_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class learnCompleteSequences_resultTupleSchemeFactory implements SchemeFactory {
      public learnCompleteSequences_resultTupleScheme getScheme() {
        return new learnCompleteSequences_resultTupleScheme();
      }
    }

    private static class learnCompleteSequences_resultTupleScheme extends TupleScheme<learnCompleteSequences_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, learnCompleteSequences_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, learnCompleteSequences_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getActivatedWordsNetwork_args implements org.apache.thrift.TBase<getActivatedWordsNetwork_args, getActivatedWordsNetwork_args._Fields>, java.io.Serializable, Cloneable, Comparable<getActivatedWordsNetwork_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getActivatedWordsNetwork_args");

    private static final org.apache.thrift.protocol.TField INPUT_WORDS_SEQUENCE_FIELD_DESC = new org.apache.thrift.protocol.TField("inputWordsSequence", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField ID_MAIN_WORD_NETWORK_FIELD_DESC = new org.apache.thrift.protocol.TField("idMainWordNetwork", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getActivatedWordsNetwork_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getActivatedWordsNetwork_argsTupleSchemeFactory());
    }

    public List<DecodingInputWordNetwork> inputWordsSequence; // required
    public int idMainWordNetwork; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      INPUT_WORDS_SEQUENCE((short)1, "inputWordsSequence"),
      ID_MAIN_WORD_NETWORK((short)2, "idMainWordNetwork");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // INPUT_WORDS_SEQUENCE
            return INPUT_WORDS_SEQUENCE;
          case 2: // ID_MAIN_WORD_NETWORK
            return ID_MAIN_WORD_NETWORK;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __IDMAINWORDNETWORK_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.INPUT_WORDS_SEQUENCE, new org.apache.thrift.meta_data.FieldMetaData("inputWordsSequence", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DecodingInputWordNetwork.class))));
      tmpMap.put(_Fields.ID_MAIN_WORD_NETWORK, new org.apache.thrift.meta_data.FieldMetaData("idMainWordNetwork", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getActivatedWordsNetwork_args.class, metaDataMap);
    }

    public getActivatedWordsNetwork_args() {
    }

    public getActivatedWordsNetwork_args(
      List<DecodingInputWordNetwork> inputWordsSequence,
      int idMainWordNetwork)
    {
      this();
      this.inputWordsSequence = inputWordsSequence;
      this.idMainWordNetwork = idMainWordNetwork;
      setIdMainWordNetworkIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getActivatedWordsNetwork_args(getActivatedWordsNetwork_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetInputWordsSequence()) {
        List<DecodingInputWordNetwork> __this__inputWordsSequence = new ArrayList<DecodingInputWordNetwork>(other.inputWordsSequence.size());
        for (DecodingInputWordNetwork other_element : other.inputWordsSequence) {
          __this__inputWordsSequence.add(new DecodingInputWordNetwork(other_element));
        }
        this.inputWordsSequence = __this__inputWordsSequence;
      }
      this.idMainWordNetwork = other.idMainWordNetwork;
    }

    public getActivatedWordsNetwork_args deepCopy() {
      return new getActivatedWordsNetwork_args(this);
    }

    @Override
    public void clear() {
      this.inputWordsSequence = null;
      setIdMainWordNetworkIsSet(false);
      this.idMainWordNetwork = 0;
    }

    public int getInputWordsSequenceSize() {
      return (this.inputWordsSequence == null) ? 0 : this.inputWordsSequence.size();
    }

    public java.util.Iterator<DecodingInputWordNetwork> getInputWordsSequenceIterator() {
      return (this.inputWordsSequence == null) ? null : this.inputWordsSequence.iterator();
    }

    public void addToInputWordsSequence(DecodingInputWordNetwork elem) {
      if (this.inputWordsSequence == null) {
        this.inputWordsSequence = new ArrayList<DecodingInputWordNetwork>();
      }
      this.inputWordsSequence.add(elem);
    }

    public List<DecodingInputWordNetwork> getInputWordsSequence() {
      return this.inputWordsSequence;
    }

    public getActivatedWordsNetwork_args setInputWordsSequence(List<DecodingInputWordNetwork> inputWordsSequence) {
      this.inputWordsSequence = inputWordsSequence;
      return this;
    }

    public void unsetInputWordsSequence() {
      this.inputWordsSequence = null;
    }

    /** Returns true if field inputWordsSequence is set (has been assigned a value) and false otherwise */
    public boolean isSetInputWordsSequence() {
      return this.inputWordsSequence != null;
    }

    public void setInputWordsSequenceIsSet(boolean value) {
      if (!value) {
        this.inputWordsSequence = null;
      }
    }

    public int getIdMainWordNetwork() {
      return this.idMainWordNetwork;
    }

    public getActivatedWordsNetwork_args setIdMainWordNetwork(int idMainWordNetwork) {
      this.idMainWordNetwork = idMainWordNetwork;
      setIdMainWordNetworkIsSet(true);
      return this;
    }

    public void unsetIdMainWordNetwork() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IDMAINWORDNETWORK_ISSET_ID);
    }

    /** Returns true if field idMainWordNetwork is set (has been assigned a value) and false otherwise */
    public boolean isSetIdMainWordNetwork() {
      return EncodingUtils.testBit(__isset_bitfield, __IDMAINWORDNETWORK_ISSET_ID);
    }

    public void setIdMainWordNetworkIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IDMAINWORDNETWORK_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case INPUT_WORDS_SEQUENCE:
        if (value == null) {
          unsetInputWordsSequence();
        } else {
          setInputWordsSequence((List<DecodingInputWordNetwork>)value);
        }
        break;

      case ID_MAIN_WORD_NETWORK:
        if (value == null) {
          unsetIdMainWordNetwork();
        } else {
          setIdMainWordNetwork((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case INPUT_WORDS_SEQUENCE:
        return getInputWordsSequence();

      case ID_MAIN_WORD_NETWORK:
        return getIdMainWordNetwork();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case INPUT_WORDS_SEQUENCE:
        return isSetInputWordsSequence();
      case ID_MAIN_WORD_NETWORK:
        return isSetIdMainWordNetwork();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getActivatedWordsNetwork_args)
        return this.equals((getActivatedWordsNetwork_args)that);
      return false;
    }

    public boolean equals(getActivatedWordsNetwork_args that) {
      if (that == null)
        return false;

      boolean this_present_inputWordsSequence = true && this.isSetInputWordsSequence();
      boolean that_present_inputWordsSequence = true && that.isSetInputWordsSequence();
      if (this_present_inputWordsSequence || that_present_inputWordsSequence) {
        if (!(this_present_inputWordsSequence && that_present_inputWordsSequence))
          return false;
        if (!this.inputWordsSequence.equals(that.inputWordsSequence))
          return false;
      }

      boolean this_present_idMainWordNetwork = true;
      boolean that_present_idMainWordNetwork = true;
      if (this_present_idMainWordNetwork || that_present_idMainWordNetwork) {
        if (!(this_present_idMainWordNetwork && that_present_idMainWordNetwork))
          return false;
        if (this.idMainWordNetwork != that.idMainWordNetwork)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_inputWordsSequence = true && (isSetInputWordsSequence());
      list.add(present_inputWordsSequence);
      if (present_inputWordsSequence)
        list.add(inputWordsSequence);

      boolean present_idMainWordNetwork = true;
      list.add(present_idMainWordNetwork);
      if (present_idMainWordNetwork)
        list.add(idMainWordNetwork);

      return list.hashCode();
    }

    @Override
    public int compareTo(getActivatedWordsNetwork_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetInputWordsSequence()).compareTo(other.isSetInputWordsSequence());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInputWordsSequence()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inputWordsSequence, other.inputWordsSequence);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIdMainWordNetwork()).compareTo(other.isSetIdMainWordNetwork());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIdMainWordNetwork()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.idMainWordNetwork, other.idMainWordNetwork);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getActivatedWordsNetwork_args(");
      boolean first = true;

      sb.append("inputWordsSequence:");
      if (this.inputWordsSequence == null) {
        sb.append("null");
      } else {
        sb.append(this.inputWordsSequence);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("idMainWordNetwork:");
      sb.append(this.idMainWordNetwork);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getActivatedWordsNetwork_argsStandardSchemeFactory implements SchemeFactory {
      public getActivatedWordsNetwork_argsStandardScheme getScheme() {
        return new getActivatedWordsNetwork_argsStandardScheme();
      }
    }

    private static class getActivatedWordsNetwork_argsStandardScheme extends StandardScheme<getActivatedWordsNetwork_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getActivatedWordsNetwork_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // INPUT_WORDS_SEQUENCE
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                  struct.inputWordsSequence = new ArrayList<DecodingInputWordNetwork>(_list16.size);
                  DecodingInputWordNetwork _elem17;
                  for (int _i18 = 0; _i18 < _list16.size; ++_i18)
                  {
                    _elem17 = new DecodingInputWordNetwork();
                    _elem17.read(iprot);
                    struct.inputWordsSequence.add(_elem17);
                  }
                  iprot.readListEnd();
                }
                struct.setInputWordsSequenceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ID_MAIN_WORD_NETWORK
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.idMainWordNetwork = iprot.readI32();
                struct.setIdMainWordNetworkIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getActivatedWordsNetwork_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.inputWordsSequence != null) {
          oprot.writeFieldBegin(INPUT_WORDS_SEQUENCE_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.inputWordsSequence.size()));
            for (DecodingInputWordNetwork _iter19 : struct.inputWordsSequence)
            {
              _iter19.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(ID_MAIN_WORD_NETWORK_FIELD_DESC);
        oprot.writeI32(struct.idMainWordNetwork);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getActivatedWordsNetwork_argsTupleSchemeFactory implements SchemeFactory {
      public getActivatedWordsNetwork_argsTupleScheme getScheme() {
        return new getActivatedWordsNetwork_argsTupleScheme();
      }
    }

    private static class getActivatedWordsNetwork_argsTupleScheme extends TupleScheme<getActivatedWordsNetwork_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getActivatedWordsNetwork_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetInputWordsSequence()) {
          optionals.set(0);
        }
        if (struct.isSetIdMainWordNetwork()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetInputWordsSequence()) {
          {
            oprot.writeI32(struct.inputWordsSequence.size());
            for (DecodingInputWordNetwork _iter20 : struct.inputWordsSequence)
            {
              _iter20.write(oprot);
            }
          }
        }
        if (struct.isSetIdMainWordNetwork()) {
          oprot.writeI32(struct.idMainWordNetwork);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getActivatedWordsNetwork_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.inputWordsSequence = new ArrayList<DecodingInputWordNetwork>(_list21.size);
            DecodingInputWordNetwork _elem22;
            for (int _i23 = 0; _i23 < _list21.size; ++_i23)
            {
              _elem22 = new DecodingInputWordNetwork();
              _elem22.read(iprot);
              struct.inputWordsSequence.add(_elem22);
            }
          }
          struct.setInputWordsSequenceIsSet(true);
        }
        if (incoming.get(1)) {
          struct.idMainWordNetwork = iprot.readI32();
          struct.setIdMainWordNetworkIsSet(true);
        }
      }
    }

  }

  public static class getActivatedWordsNetwork_result implements org.apache.thrift.TBase<getActivatedWordsNetwork_result, getActivatedWordsNetwork_result._Fields>, java.io.Serializable, Cloneable, Comparable<getActivatedWordsNetwork_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getActivatedWordsNetwork_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getActivatedWordsNetwork_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getActivatedWordsNetwork_resultTupleSchemeFactory());
    }

    public List<String> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getActivatedWordsNetwork_result.class, metaDataMap);
    }

    public getActivatedWordsNetwork_result() {
    }

    public getActivatedWordsNetwork_result(
      List<String> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getActivatedWordsNetwork_result(getActivatedWordsNetwork_result other) {
      if (other.isSetSuccess()) {
        List<String> __this__success = new ArrayList<String>(other.success);
        this.success = __this__success;
      }
    }

    public getActivatedWordsNetwork_result deepCopy() {
      return new getActivatedWordsNetwork_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new ArrayList<String>();
      }
      this.success.add(elem);
    }

    public List<String> getSuccess() {
      return this.success;
    }

    public getActivatedWordsNetwork_result setSuccess(List<String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getActivatedWordsNetwork_result)
        return this.equals((getActivatedWordsNetwork_result)that);
      return false;
    }

    public boolean equals(getActivatedWordsNetwork_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getActivatedWordsNetwork_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getActivatedWordsNetwork_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getActivatedWordsNetwork_resultStandardSchemeFactory implements SchemeFactory {
      public getActivatedWordsNetwork_resultStandardScheme getScheme() {
        return new getActivatedWordsNetwork_resultStandardScheme();
      }
    }

    private static class getActivatedWordsNetwork_resultStandardScheme extends StandardScheme<getActivatedWordsNetwork_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getActivatedWordsNetwork_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                  struct.success = new ArrayList<String>(_list24.size);
                  String _elem25;
                  for (int _i26 = 0; _i26 < _list24.size; ++_i26)
                  {
                    _elem25 = iprot.readString();
                    struct.success.add(_elem25);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getActivatedWordsNetwork_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (String _iter27 : struct.success)
            {
              oprot.writeString(_iter27);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getActivatedWordsNetwork_resultTupleSchemeFactory implements SchemeFactory {
      public getActivatedWordsNetwork_resultTupleScheme getScheme() {
        return new getActivatedWordsNetwork_resultTupleScheme();
      }
    }

    private static class getActivatedWordsNetwork_resultTupleScheme extends TupleScheme<getActivatedWordsNetwork_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getActivatedWordsNetwork_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (String _iter28 : struct.success)
            {
              oprot.writeString(_iter28);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getActivatedWordsNetwork_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new ArrayList<String>(_list29.size);
            String _elem30;
            for (int _i31 = 0; _i31 < _list29.size; ++_i31)
            {
              _elem30 = iprot.readString();
              struct.success.add(_elem30);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
