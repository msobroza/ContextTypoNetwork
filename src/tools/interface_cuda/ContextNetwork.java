/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package tools.interface_cuda;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-07-22")
public class ContextNetwork implements org.apache.thrift.TBase<ContextNetwork, ContextNetwork._Fields>, java.io.Serializable, Cloneable, Comparable<ContextNetwork> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ContextNetwork");

  private static final org.apache.thrift.protocol.TField ID_NETWORK_FIELD_DESC = new org.apache.thrift.protocol.TField("idNetwork", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField ID_MAIN_WORD_NETWORK_FIELD_DESC = new org.apache.thrift.protocol.TField("idMainWordNetwork", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField DISTANCE_FIELD_DESC = new org.apache.thrift.protocol.TField("distance", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField NWORDS_FIELD_DESC = new org.apache.thrift.protocol.TField("nwords", org.apache.thrift.protocol.TType.I32, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ContextNetworkStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ContextNetworkTupleSchemeFactory());
  }

  public int idNetwork; // required
  public int idMainWordNetwork; // required
  public int distance; // required
  public int nwords; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID_NETWORK((short)1, "idNetwork"),
    ID_MAIN_WORD_NETWORK((short)2, "idMainWordNetwork"),
    DISTANCE((short)3, "distance"),
    NWORDS((short)4, "nwords");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID_NETWORK
          return ID_NETWORK;
        case 2: // ID_MAIN_WORD_NETWORK
          return ID_MAIN_WORD_NETWORK;
        case 3: // DISTANCE
          return DISTANCE;
        case 4: // NWORDS
          return NWORDS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __IDNETWORK_ISSET_ID = 0;
  private static final int __IDMAINWORDNETWORK_ISSET_ID = 1;
  private static final int __DISTANCE_ISSET_ID = 2;
  private static final int __NWORDS_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID_NETWORK, new org.apache.thrift.meta_data.FieldMetaData("idNetwork", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ID_MAIN_WORD_NETWORK, new org.apache.thrift.meta_data.FieldMetaData("idMainWordNetwork", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DISTANCE, new org.apache.thrift.meta_data.FieldMetaData("distance", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NWORDS, new org.apache.thrift.meta_data.FieldMetaData("nwords", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ContextNetwork.class, metaDataMap);
  }

  public ContextNetwork() {
  }

  public ContextNetwork(
    int idNetwork,
    int idMainWordNetwork,
    int distance,
    int nwords)
  {
    this();
    this.idNetwork = idNetwork;
    setIdNetworkIsSet(true);
    this.idMainWordNetwork = idMainWordNetwork;
    setIdMainWordNetworkIsSet(true);
    this.distance = distance;
    setDistanceIsSet(true);
    this.nwords = nwords;
    setNwordsIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ContextNetwork(ContextNetwork other) {
    __isset_bitfield = other.__isset_bitfield;
    this.idNetwork = other.idNetwork;
    this.idMainWordNetwork = other.idMainWordNetwork;
    this.distance = other.distance;
    this.nwords = other.nwords;
  }

  public ContextNetwork deepCopy() {
    return new ContextNetwork(this);
  }

  @Override
  public void clear() {
    setIdNetworkIsSet(false);
    this.idNetwork = 0;
    setIdMainWordNetworkIsSet(false);
    this.idMainWordNetwork = 0;
    setDistanceIsSet(false);
    this.distance = 0;
    setNwordsIsSet(false);
    this.nwords = 0;
  }

  public int getIdNetwork() {
    return this.idNetwork;
  }

  public ContextNetwork setIdNetwork(int idNetwork) {
    this.idNetwork = idNetwork;
    setIdNetworkIsSet(true);
    return this;
  }

  public void unsetIdNetwork() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IDNETWORK_ISSET_ID);
  }

  /** Returns true if field idNetwork is set (has been assigned a value) and false otherwise */
  public boolean isSetIdNetwork() {
    return EncodingUtils.testBit(__isset_bitfield, __IDNETWORK_ISSET_ID);
  }

  public void setIdNetworkIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IDNETWORK_ISSET_ID, value);
  }

  public int getIdMainWordNetwork() {
    return this.idMainWordNetwork;
  }

  public ContextNetwork setIdMainWordNetwork(int idMainWordNetwork) {
    this.idMainWordNetwork = idMainWordNetwork;
    setIdMainWordNetworkIsSet(true);
    return this;
  }

  public void unsetIdMainWordNetwork() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IDMAINWORDNETWORK_ISSET_ID);
  }

  /** Returns true if field idMainWordNetwork is set (has been assigned a value) and false otherwise */
  public boolean isSetIdMainWordNetwork() {
    return EncodingUtils.testBit(__isset_bitfield, __IDMAINWORDNETWORK_ISSET_ID);
  }

  public void setIdMainWordNetworkIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IDMAINWORDNETWORK_ISSET_ID, value);
  }

  public int getDistance() {
    return this.distance;
  }

  public ContextNetwork setDistance(int distance) {
    this.distance = distance;
    setDistanceIsSet(true);
    return this;
  }

  public void unsetDistance() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DISTANCE_ISSET_ID);
  }

  /** Returns true if field distance is set (has been assigned a value) and false otherwise */
  public boolean isSetDistance() {
    return EncodingUtils.testBit(__isset_bitfield, __DISTANCE_ISSET_ID);
  }

  public void setDistanceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DISTANCE_ISSET_ID, value);
  }

  public int getNwords() {
    return this.nwords;
  }

  public ContextNetwork setNwords(int nwords) {
    this.nwords = nwords;
    setNwordsIsSet(true);
    return this;
  }

  public void unsetNwords() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NWORDS_ISSET_ID);
  }

  /** Returns true if field nwords is set (has been assigned a value) and false otherwise */
  public boolean isSetNwords() {
    return EncodingUtils.testBit(__isset_bitfield, __NWORDS_ISSET_ID);
  }

  public void setNwordsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NWORDS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID_NETWORK:
      if (value == null) {
        unsetIdNetwork();
      } else {
        setIdNetwork((Integer)value);
      }
      break;

    case ID_MAIN_WORD_NETWORK:
      if (value == null) {
        unsetIdMainWordNetwork();
      } else {
        setIdMainWordNetwork((Integer)value);
      }
      break;

    case DISTANCE:
      if (value == null) {
        unsetDistance();
      } else {
        setDistance((Integer)value);
      }
      break;

    case NWORDS:
      if (value == null) {
        unsetNwords();
      } else {
        setNwords((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID_NETWORK:
      return getIdNetwork();

    case ID_MAIN_WORD_NETWORK:
      return getIdMainWordNetwork();

    case DISTANCE:
      return getDistance();

    case NWORDS:
      return getNwords();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID_NETWORK:
      return isSetIdNetwork();
    case ID_MAIN_WORD_NETWORK:
      return isSetIdMainWordNetwork();
    case DISTANCE:
      return isSetDistance();
    case NWORDS:
      return isSetNwords();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ContextNetwork)
      return this.equals((ContextNetwork)that);
    return false;
  }

  public boolean equals(ContextNetwork that) {
    if (that == null)
      return false;

    boolean this_present_idNetwork = true;
    boolean that_present_idNetwork = true;
    if (this_present_idNetwork || that_present_idNetwork) {
      if (!(this_present_idNetwork && that_present_idNetwork))
        return false;
      if (this.idNetwork != that.idNetwork)
        return false;
    }

    boolean this_present_idMainWordNetwork = true;
    boolean that_present_idMainWordNetwork = true;
    if (this_present_idMainWordNetwork || that_present_idMainWordNetwork) {
      if (!(this_present_idMainWordNetwork && that_present_idMainWordNetwork))
        return false;
      if (this.idMainWordNetwork != that.idMainWordNetwork)
        return false;
    }

    boolean this_present_distance = true;
    boolean that_present_distance = true;
    if (this_present_distance || that_present_distance) {
      if (!(this_present_distance && that_present_distance))
        return false;
      if (this.distance != that.distance)
        return false;
    }

    boolean this_present_nwords = true;
    boolean that_present_nwords = true;
    if (this_present_nwords || that_present_nwords) {
      if (!(this_present_nwords && that_present_nwords))
        return false;
      if (this.nwords != that.nwords)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_idNetwork = true;
    list.add(present_idNetwork);
    if (present_idNetwork)
      list.add(idNetwork);

    boolean present_idMainWordNetwork = true;
    list.add(present_idMainWordNetwork);
    if (present_idMainWordNetwork)
      list.add(idMainWordNetwork);

    boolean present_distance = true;
    list.add(present_distance);
    if (present_distance)
      list.add(distance);

    boolean present_nwords = true;
    list.add(present_nwords);
    if (present_nwords)
      list.add(nwords);

    return list.hashCode();
  }

  @Override
  public int compareTo(ContextNetwork other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetIdNetwork()).compareTo(other.isSetIdNetwork());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIdNetwork()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.idNetwork, other.idNetwork);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIdMainWordNetwork()).compareTo(other.isSetIdMainWordNetwork());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIdMainWordNetwork()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.idMainWordNetwork, other.idMainWordNetwork);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDistance()).compareTo(other.isSetDistance());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDistance()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.distance, other.distance);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNwords()).compareTo(other.isSetNwords());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNwords()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nwords, other.nwords);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ContextNetwork(");
    boolean first = true;

    sb.append("idNetwork:");
    sb.append(this.idNetwork);
    first = false;
    if (!first) sb.append(", ");
    sb.append("idMainWordNetwork:");
    sb.append(this.idMainWordNetwork);
    first = false;
    if (!first) sb.append(", ");
    sb.append("distance:");
    sb.append(this.distance);
    first = false;
    if (!first) sb.append(", ");
    sb.append("nwords:");
    sb.append(this.nwords);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ContextNetworkStandardSchemeFactory implements SchemeFactory {
    public ContextNetworkStandardScheme getScheme() {
      return new ContextNetworkStandardScheme();
    }
  }

  private static class ContextNetworkStandardScheme extends StandardScheme<ContextNetwork> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ContextNetwork struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID_NETWORK
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.idNetwork = iprot.readI32();
              struct.setIdNetworkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ID_MAIN_WORD_NETWORK
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.idMainWordNetwork = iprot.readI32();
              struct.setIdMainWordNetworkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DISTANCE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.distance = iprot.readI32();
              struct.setDistanceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // NWORDS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.nwords = iprot.readI32();
              struct.setNwordsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ContextNetwork struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_NETWORK_FIELD_DESC);
      oprot.writeI32(struct.idNetwork);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ID_MAIN_WORD_NETWORK_FIELD_DESC);
      oprot.writeI32(struct.idMainWordNetwork);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DISTANCE_FIELD_DESC);
      oprot.writeI32(struct.distance);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NWORDS_FIELD_DESC);
      oprot.writeI32(struct.nwords);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ContextNetworkTupleSchemeFactory implements SchemeFactory {
    public ContextNetworkTupleScheme getScheme() {
      return new ContextNetworkTupleScheme();
    }
  }

  private static class ContextNetworkTupleScheme extends TupleScheme<ContextNetwork> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ContextNetwork struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetIdNetwork()) {
        optionals.set(0);
      }
      if (struct.isSetIdMainWordNetwork()) {
        optionals.set(1);
      }
      if (struct.isSetDistance()) {
        optionals.set(2);
      }
      if (struct.isSetNwords()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetIdNetwork()) {
        oprot.writeI32(struct.idNetwork);
      }
      if (struct.isSetIdMainWordNetwork()) {
        oprot.writeI32(struct.idMainWordNetwork);
      }
      if (struct.isSetDistance()) {
        oprot.writeI32(struct.distance);
      }
      if (struct.isSetNwords()) {
        oprot.writeI32(struct.nwords);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ContextNetwork struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.idNetwork = iprot.readI32();
        struct.setIdNetworkIsSet(true);
      }
      if (incoming.get(1)) {
        struct.idMainWordNetwork = iprot.readI32();
        struct.setIdMainWordNetworkIsSet(true);
      }
      if (incoming.get(2)) {
        struct.distance = iprot.readI32();
        struct.setDistanceIsSet(true);
      }
      if (incoming.get(3)) {
        struct.nwords = iprot.readI32();
        struct.setNwordsIsSet(true);
      }
    }
  }

}

